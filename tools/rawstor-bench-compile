#!/usr/bin/env python3

import argparse
import datetime
import json
from pathlib import Path
import shutil


def get_commit_txt(repo_name, commit_sha):
    commit_url = \
        f"https://github.com/rawstor/{repo_name}/commit/" \
        f"{commit_sha}"
    return f"[{commit_sha[:7]}]({commit_url})"


def get_date_txt(dt):
    return dt.strftime("%Y-%m-%d %H:%M:%S")


def read_fio_txt(prefix, meta):
    filename = prefix / "data" / "fio" / meta["path"] / meta["data"]["txt"]
    with open(filename) as f:
        return f.read()


def read_fio_json(prefix, meta):
    filename = prefix / "data" / "fio" / meta["path"] / meta["data"]["json"]
    with open(filename) as f:
        return json.load(f)


def load_meta(meta_path):
    with open(meta_path, 'r') as f:
        meta = json.load(f)
        meta["date"] = datetime.datetime.fromisoformat(meta["date"])
    return meta


def compile_commit_md(
    prefix, dest_abspath, dest_path, repo_name, meta, fio, name,
):
    fio_txt = read_fio_txt(prefix, meta)

    dest_abspath.mkdir(parents=True, exist_ok=True)

    commit_sha = meta["commit"]

    url = f"{dest_path}/{commit_sha}.md"
    filename = dest_abspath / f"{commit_sha}.md"
    job = fio["jobs"][0]["job options"]
    with open(filename, "w") as commit_md:
        commit_md.write("[&lt; back](..)\n\n")
        commit_md.write(f"# {name}\n\n")
        commit_md.write(f"{get_date_txt(meta["date"])}\n\n")
        commit_md.write(f"{meta["branch"]}\n\n")
        commit_md.write(f"{get_commit_txt(repo_name, commit_sha)}\n\n")
        commit_md.write(f"rw = {job["rw"]}, ")
        commit_md.write(f"bs = {job["bs"]}, ")
        commit_md.write(f"iodepth = {job["iodepth"]}, ")
        commit_md.write(f"numjobs = {job["numjobs"]}\n\n")
        commit_md.write("```\n")
        commit_md.write(fio_txt)
        commit_md.write("```\n")

    return url


def compile_repo_md(prefix, dest_abspath, dest_path, repo_name, repo):
    dest_abspath.mkdir(parents=True, exist_ok=True)

    url = f"{dest_path}/README.md"
    filename = dest_abspath / "README.md"
    with open(filename, "w") as repo_md:
        repo_md.write(f"# [&lt;](..) {repo_name} tests\n\n")
        for name, metas in repo:
            repo_md.write(f"## {name}\n\n")
            repo_md.write(
                "| "
                "Date | "
                "Branch | "
                "Commit | "
                "Read IOPS | "
                "Read Latency | "
                "Write IOPS | "
                "Write Latency |"
                "\n"
                "| "
                ":--- | "
                ":---   | "
                ":---   | "
                "     ---: | "
                "        ---: | "
                "      ---: | "
                "         ---: |"
                "\n"
            )
            for meta in metas:
                fio = read_fio_json(prefix, meta)

                commmit_md_dest_path = f"{name}"
                commmit_md_dest_abspath = dest_abspath / commmit_md_dest_path
                commmit_md_url = compile_commit_md(
                    prefix,
                    commmit_md_dest_abspath,
                    commmit_md_dest_path,
                    repo_name,
                    meta,
                    fio,
                    name,
                )

                commit_sha = meta["commit"]

                repo_md.write(
                    f"| "
                    f"[{get_date_txt(meta["date"])}]({commmit_md_url}) | "
                    f"{meta["branch"]} | "
                    f"{get_commit_txt(repo_name, commit_sha)} | "
                    f"{fio["jobs"][0]["read"]["iops_mean"]} | "
                    f"{fio["jobs"][0]["read"]["lat_ns"]["mean"]} | "
                    f"{fio["jobs"][0]["write"]["iops_mean"]} | "
                    f"{fio["jobs"][0]["write"]["lat_ns"]["mean"]} |"
                    f"\n"
                )
            repo_md.write("\n")

    return url


def compile_index_md(prefix, dest_abspath, repos):
    dest_abspath.mkdir(parents=True, exist_ok=True)
    with open(dest_abspath / "README.md", "w") as index_md:
        index_md.write("[&lt; back](..)\n\n")
        for repo_name, repo in repos:
            repo = sorted(list(repo.items()))
            repo_md_dest_path = f"{repo_name}"
            repo_md_dest_abspath = dest_abspath / repo_md_dest_path
            repo_md_url = compile_repo_md(
                prefix,
                repo_md_dest_abspath,
                repo_md_dest_path,
                repo_name,
                repo,
            )
            index_md.write(f"[{repo_name} tests]({repo_md_url})\n")


def compile_fio(prefix=None, **kwargs):
    prefix = Path(prefix)
    src_dir = prefix / "data" / "fio"

    metas = []
    for meta_path in src_dir.glob("**/*.meta"):
        metas.append(load_meta(meta_path))

    metas.sort(key=lambda meta: meta["date"], reverse=True)

    repos = {}
    for meta in metas:
        repo = repos.setdefault(meta["repo"], {})
        repo.setdefault(meta["name"], []).append(meta)
    repos = sorted(list(repos.items()))

    dest_abspath = Path(prefix) / "docs" / "fio"
    shutil.rmtree(dest_abspath, ignore_errors=True)
    compile_index_md(prefix, dest_abspath, repos)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--prefix", help="prefix", required=True)
    parser.add_argument("what", help="what to compile", choices=("fio",))
    args = parser.parse_args()

    if args.what == "fio":
        compile_fio(**vars(args))

    print("Compiled successfully")


if __name__ == '__main__':
    main()
